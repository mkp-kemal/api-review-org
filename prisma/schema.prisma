generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String?        @unique
  passwordHash  String?
  role          Role           @default(REVIEWER)
  isVerified    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isBanned      Boolean        @default(false)

  // Relations for Org submission/approval
  submittedOrgs Organization[] @relation("OrgSubmittedBy")
  approvedOrgs  Organization[] @relation("OrgApprovedBy")

  // Relations for Team submission/approval
  submittedTeams Team[]        @relation("TeamSubmittedBy")
  approvedTeams  Team[]        @relation("TeamApprovedBy")

  auditLogs     AuditLog[]     @relation("ActorLogs")
  flags         Flag[]         @relation("FlagReporter")
  orgResponses  OrgResponse[]
  orgClaims     Organization[] @relation("OrgClaims")
  refreshTokens RefreshToken[]
  reviews       Review[]
}


model Organization {
  id            String         @id @default(cuid())
  name          String
  city          String
  state         String
  website       String?
  claimedById   String?
  status        OrgStatus      @default(PENDING) // pending | approved | rejected
  submittedById String?        // Org Admin yang submit
  approvedById  String?        // Site Admin yang approve/reject
  rejectedReason String?       // Optional note jika reject
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  claimedBy     User?          @relation("OrgClaims", fields: [claimedById], references: [id])
  submittedBy   User?          @relation("OrgSubmittedBy", fields: [submittedById], references: [id])
  approvedBy    User?          @relation("OrgApprovedBy", fields: [approvedById], references: [id])
  subscriptions Subscription[]
  teams         Team[]
}


model Team {
  id             String       @id @default(cuid())
  organizationId String
  name           String       @default("Unnamed Team")
  ageLevel       String
  division       String
  city           String
  state          String
  status         OrgStatus     @default(PENDING) // pending | approved | rejected
  submittedById  String?       // Org Admin yang submit
  approvedById   String?       // Site Admin yang approve/reject
  rejectedReason String?       // Optional note jika reject
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reviews        Review[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  submittedBy    User?        @relation("TeamSubmittedBy", fields: [submittedById], references: [id])
  approvedBy     User?        @relation("TeamApprovedBy", fields: [approvedById], references: [id])
}


model Review {
  id          String       @id @default(cuid())
  teamId      String
  userId      String
  title       String
  body        String
  season      Season
  isPublic    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  editedAt    DateTime?
  flags       Flag[]
  orgResponse OrgResponse?
  rating      Rating?      @relation("ReviewRating")
  team        Team         @relation(fields: [teamId], references: [id])
  user        User         @relation(fields: [userId], references: [id])

  @@unique([userId, teamId, season])
}

model Rating {
  id           String @id @default(cuid())
  reviewId     String @unique
  coaching     Int
  development  Int
  transparency Int
  culture      Int
  safety       Int
  overall      Float
  review       Review @relation("ReviewRating", fields: [reviewId], references: [id])
}

model Flag {
  id             String     @id @default(cuid())
  reviewId       String
  reporterUserId String
  reason         String
  status         FlagStatus @default(OPEN)
  createdAt      DateTime   @default(now())
  reporter       User       @relation("FlagReporter", fields: [reporterUserId], references: [id])
  review         Review     @relation(fields: [reviewId], references: [id])
}

model OrgResponse {
  id        String   @id @default(cuid())
  reviewId  String   @unique
  orgUserId String
  body      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [orgUserId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id])
}

model Subscription {
  id               String             @id @default(cuid())
  organizationId   String
  plan             SubscriptionPlan
  status           SubscriptionStatus @default(ACTIVE)
  stripeCustomerId String
  stripeSubId      String
  createdAt        DateTime           @default(now())
  organization     Organization       @relation(fields: [organizationId], references: [id])
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String   @default("ANONYMOUS")
  action      String
  targetType  String
  targetId    String
  metadata    Json?
  createdAt   DateTime @default(now())
  actor       User     @relation("ActorLogs", fields: [actorUserId], references: [id])

  @@index([actorUserId])
  @@index([targetType, targetId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  REVIEWER
  ORG_ADMIN
  SITE_ADMIN
  ANONYMOUS
}

// enum LOGS_TARGET {
//   REVIEWS
//   USER
//   FLAGS_EXPORT
//   REVIEWS_EXPORT
// }

enum Season {
  SPRING
  SUMMER
  FALL
  WINTER
}

enum FlagStatus {
  OPEN
  INVESTIGATING
  RESOLVED
  REJECTED
}

enum SubscriptionPlan {
  BASIC
  PRO
  ELITE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
}

enum OrgStatus {
  PENDING
  APPROVED
  REJECTED
}