generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String?  @unique
  passwordHash String?
  role         Role     @default(REVIEWER)
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isBanned     Boolean  @default(false)

  submittedOrgs Organization[] @relation("OrgSubmittedBy")
  approvedOrgs  Organization[] @relation("OrgApprovedBy")

  submittedTeams Team[] @relation("TeamSubmittedBy")
  approvedTeams  Team[] @relation("TeamApprovedBy")

  auditLogs     AuditLog[]     @relation("ActorLogs")
  flags         Flag[]         @relation("FlagReporter")
  orgResponses  OrgResponse[]
  orgClaims     Organization[] @relation("OrgClaims")
  teamClaims    Team[]         @relation("TeamClaims")
  refreshTokens RefreshToken[]
  reviews       Review[]

  orgRoles  UserOrgRole[]
  teamRoles UserTeamRole[]
}

model UserOrgRole {
  id     String  @id @default(cuid())
  userId String
  orgId  String
  role   OrgRole

  user User         @relation(fields: [userId], references: [id])
  org  Organization @relation(fields: [orgId], references: [id])

  @@unique([userId, orgId])
}

model UserTeamRole {
  id     String   @id @default(cuid())
  userId String
  teamId String
  role   TeamRole

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model Organization {
  id             String    @id @default(cuid())
  name           String
  city           String
  state          String
  website        String?
  claimedById    String?
  status         OrgStatus @default(PENDING)
  submittedById  String?
  approvedById   String?
  rejectedReason String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  claimedBy   User?         @relation("OrgClaims", fields: [claimedById], references: [id])
  submittedBy User?         @relation("OrgSubmittedBy", fields: [submittedById], references: [id])
  approvedBy  User?         @relation("OrgApprovedBy", fields: [approvedById], references: [id])
  teams       Team[]
  roles       UserOrgRole[]

  // Relasi ke Subscription (satu aktif, bisa default BASIC)
  subscription Subscription?
}

model Team {
  id             String    @id @default(cuid())
  organizationId String
  name           String
  ageLevel       String
  division       String
  city           String
  state          String
  status         OrgStatus @default(PENDING)
  submittedById  String?
  approvedById   String?
  rejectedReason String?
  claimedById    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  claimedBy    User?          @relation("TeamClaims", fields: [claimedById], references: [id])
  organization Organization   @relation(fields: [organizationId], references: [id])
  submittedBy  User?          @relation("TeamSubmittedBy", fields: [submittedById], references: [id])
  approvedBy   User?          @relation("TeamApprovedBy", fields: [approvedById], references: [id])
  reviews      Review[]
  roles        UserTeamRole[]

  // Relasi ke Subscription
  subscription Subscription?
}

model Subscription {
  id               String             @id @default(cuid())
  organizationId   String?            @unique // unique biar 1 org 1 subscription
  teamId           String?            @unique // unique biar 1 team 1 subscription
  plan             SubscriptionPlan   @default(BASIC) // default BASIC
  status           SubscriptionStatus @default(ACTIVE)
  stripeCustomerId String?
  stripeSubId      String?
  createdAt        DateTime           @default(now())

  organization Organization? @relation(fields: [organizationId], references: [id])
  team         Team?         @relation(fields: [teamId], references: [id])
}

model Review {
  id                  String       @id @default(cuid())
  teamId              String
  userId              String
  title               String
  body                String
  season_term         Season       @default(SPRING)
  season_year         Int          @default(2024)
  age_level_at_review String       @default("12U")
  isPublic            Boolean      @default(false)
  createdAt           DateTime     @default(now())
  editedAt            DateTime?
  flags               Flag[]
  orgResponse         OrgResponse?
  rating              Rating?      @relation("ReviewRating")
  team                Team         @relation(fields: [teamId], references: [id])
  user                User         @relation(fields: [userId], references: [id])

  @@unique([userId, teamId, season_term, season_year])
}

model Rating {
  id           String @id @default(cuid())
  reviewId     String @unique
  coaching     Int
  development  Int
  transparency Int
  culture      Int
  safety       Int
  overall      Float
  review       Review @relation("ReviewRating", fields: [reviewId], references: [id])
}

model Flag {
  id             String     @id @default(cuid())
  reviewId       String
  reporterUserId String
  reason         String
  status         FlagStatus @default(OPEN)
  ip             String
  createdAt      DateTime   @default(now())
  reporter       User       @relation("FlagReporter", fields: [reporterUserId], references: [id])
  review         Review     @relation(fields: [reviewId], references: [id])

  @@unique([reviewId, reporterUserId]) // ðŸš¨ prevent duplicate flag
  @@unique([reviewId, ip])
}

model OrgResponse {
  id        String   @id @default(cuid())
  reviewId  String   @unique
  orgUserId String
  body      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [orgUserId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id])
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String   @default("ANONYMOUS")
  action      String
  targetType  String
  targetId    String
  metadata    Json?
  createdAt   DateTime @default(now())
  actor       User     @relation("ActorLogs", fields: [actorUserId], references: [id])

  @@index([actorUserId])
  @@index([targetType, targetId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  REVIEWER
  ORG_ADMIN
  TEAM_ADMIN
  SITE_ADMIN
  ANONYMOUS
}

enum OrgRole {
  ORG_ADMIN
}

enum TeamRole {
  TEAM_ADMIN
}

enum Season {
  SPRING
  SUMMER
  FALL
  WINTER
}

enum FlagStatus {
  OPEN
  INVESTIGATING
  RESOLVED
  REJECTED
}

enum SubscriptionPlan {
  BASIC
  PRO
  ELITE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
}

enum OrgStatus {
  PENDING
  APPROVED
  REJECTED
}
